<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping package="edu.snnu.carrent.model">
	<!-- name属性：哪个类
		 table属性：对应哪个表，如果不写，默认的表名就是类的简单名称
	-->
	<class name="Order" table="info">
		<id name="id" type="int" column="id">
            <generator class="native"/>
		</id>
		<!-- 普通的属性（数据库中的基本类型，如字符串、日期、数字等） 
			name属性：对象中的属性名，必须要有。
			type属性：类型，如果不写，Hibernate会自动检测。
				可以写Java中类的全名。
				或是写hibernate类型。
			column属性：对应表中的列名，如果没有，默认为属性名。
			length属性：长度，不是所有的类型都有长度属性，比如varchar有，但int没有，如果不写默认为255
			not-null属性：非空约束，默认为false
		-->
		<!-- 
		<property name="name"/>
		 -->
		<property name="drivername" type="string" column="drivername" length="20" not-null="true"/>

		<property name="telephone" type="int" column="telephone" not-null="true"/>
		
		<property name="birthday" type="date" column="birthday" not-null="true"/>
		
		<property name="takeday" type="date" column="takeday" not-null="true"/>
		
		<property name="backday" type="date" column="backday" not-null="true"/>
		
		<property name="takeplace" type="string" column="takeplace" not-null="true"/>
		
		<property name="backplace" type="string" column="backplace" not-null="true"/>
		
		<property name="payway" type="string" column="payway" not-null="true"/>
		
		<property name="price" type="int" column="price" not-null="true"/>
		
		<property name="company" type="string" column="company" not-null="true"/>
		
		<property name="carname" type="string" column="carname" not-null="true"/>
		
		<property name="service" type="string" column="service" not-null="true"/>
		
		<property name="isPay" type="int" column="isPay" not-null="true"/>
		
		<!-- 当列表与关键字冲突时，可以通过column属性指定一个其他的列名。
			或是使用反引号包围起来。
			
			指定使用text类型时，最好再指定length，以确定生成的SQL类型是能够存放指定数量的字符的。
			
		<property name="desc" type="text" length="5000" column="desc_" ></property>-->
		
		<!-- 头像，二进制类型，最好指定长度 -->
		<property name="photo" type="binary" length="1024000"></property>

		<many-to-one name="user" class="User">
			<column name="userid"></column>
		</many-to-one>
	</class>
</hibernate-mapping>
